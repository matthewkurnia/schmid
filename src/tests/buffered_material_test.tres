[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=3]
code = "shader_type spatial;
render_mode unshaded;

const float PI = 3.14159;

void fragment() {
//	// Tangent alignment mode start
//	vec2 view_space_normal = normalize((PROJECTION_MATRIX * vec4(NORMAL, 0)).xy * VIEWPORT_SIZE);
//	mat2 tangent_matrix;
//	tangent_matrix[0] = vec2(0, -1);
//	tangent_matrix[1] = vec2(1, 0);
//	vec2 view_space_tangent = tangent_matrix * view_space_normal;
//	float angle_normalized = fract(atan(view_space_tangent.y, view_space_tangent.x) / (2.0 * PI))
//	ALBEDO = vec3(angle_normalized, 0, 0);
//	// Tangent alignment mode end
	
	// Encoded alignment mode start
	float normalized_encoded_angle = 0.0;
	vec3 world_space_stroke_direction = cos(normalized_encoded_angle * 2.0 * PI) * TANGENT + sin(normalized_encoded_angle * 2.0 * PI) * BINORMAL;
	vec2 view_space_stroke_direction = normalize((PROJECTION_MATRIX * vec4(world_space_stroke_direction, 0)).xy * VIEWPORT_SIZE);
	float angle_normalized = fract(atan(view_space_stroke_direction.y, view_space_stroke_direction.x) / (2.0 * PI));
	ALBEDO = vec3(angle_normalized, 0, 0);
	// Encoded alignment mode end
}"

[resource]
shader = SubResource( 3 )
